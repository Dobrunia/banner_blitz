// UI management and DOM manipulation
export class UI {
  constructor(gameLogic = null) {
    this.gameLogic = gameLogic;
    this.currentMode = 'flag';
    this.isAnswered = false;
    this.isAnswerShown = false;
    this.elements = {
      // Sidebar
      burger: document.getElementById('burger'),
      sidebar: document.getElementById('sidebar'),
      overlay: document.getElementById('overlay'),
      // closeSidebar: document.getElementById('close-sidebar'),
      navClassic: document.getElementById('nav-classic'),
      navTime: document.getElementById('nav-time'),
      navSurvival: document.getElementById('nav-survival'),
      navFlags: document.getElementById('nav-flags'),
      navRegion: document.getElementById('nav-region'),
      navLearning: document.getElementById('nav-learning'),
      navReset: document.getElementById('nav-reset'),

      // Game elements
      gameScreen: document.getElementById('game-screen'),
      flagsScreen: document.getElementById('flags-screen'),
      loadingScreen: document.getElementById('loading-screen'),
      score: document.getElementById('score'),
      flagsScore: document.getElementById('flags-score'),
      flag: document.getElementById('flag'),
      question: document.getElementById('question'),
      options: document.getElementById('options'),
      // Flags game elements
      flagsQuestion: document.getElementById('flags-question'),
      flagsContainer: document.getElementById('flags-container'),
      flagsOptions: document.getElementById('flags-options'),
    };

    this.isSidebarOpen = false;
    this.init();
  }

  init() {
    this.setupSidebar();
    this.setupGame();
  }

  // Sidebar management
  setupSidebar() {
    this.elements.burger.addEventListener('click', () => this.toggleSidebar());
    // this.elements.closeSidebar.addEventListener('click', () => this.closeSidebar());
    this.elements.overlay.addEventListener('click', () => this.closeSidebar());
    this.elements.navClassic.addEventListener('click', () => {
      this.setActiveNavItem(this.elements.navClassic);
      this.closeSidebar();
      this.dispatchEvent('switchToClassicMode');
    });
    this.elements.navTime.addEventListener('click', () => {
      this.setActiveNavItem(this.elements.navTime);
      this.closeSidebar();
      this.dispatchEvent('switchToTimeMode');
    });
    this.elements.navSurvival.addEventListener('click', () => {
      this.setActiveNavItem(this.elements.navSurvival);
      this.closeSidebar();
      this.dispatchEvent('switchToSurvivalMode');
    });
    this.elements.navFlags.addEventListener('click', () => {
      this.setActiveNavItem(this.elements.navFlags);
      this.closeSidebar();
      this.dispatchEvent('switchToFlagsMode');
    });
    this.elements.navRegion.addEventListener('click', () => {
      this.setActiveNavItem(this.elements.navRegion);
      this.closeSidebar();
      this.dispatchEvent('switchToRegionMode');
    });
    this.elements.navLearning.addEventListener('click', () => {
      this.setActiveNavItem(this.elements.navLearning);
      this.closeSidebar();
      this.dispatchEvent('switchToLearningMode');
    });
    this.elements.navReset.addEventListener('click', () => {
      this.closeSidebar();
      this.dispatchEvent('resetAllGames');
    });
  }

  toggleSidebar() {
    if (this.isSidebarOpen) {
      this.closeSidebar();
    } else {
      this.openSidebar();
    }
  }

  openSidebar() {
    this.elements.sidebar.classList.add('open');
    this.elements.overlay.classList.add('active');
    this.isSidebarOpen = true;
    document.body.style.overflow = 'hidden';
  }

  closeSidebar() {
    this.elements.sidebar.classList.remove('open');
    this.elements.overlay.classList.remove('active');
    this.isSidebarOpen = false;
    document.body.style.overflow = '';
  }

  setActiveNavItem(activeItem) {
    // –£–±–∏—Ä–∞–µ–º active —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    this.elements.navClassic.classList.remove('active');
    this.elements.navTime.classList.remove('active');
    this.elements.navSurvival.classList.remove('active');
    this.elements.navFlags.classList.remove('active');
    this.elements.navRegion.classList.remove('active');
    this.elements.navLearning.classList.remove('active');

    // –î–æ–±–∞–≤–ª—è–µ–º active –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ
    activeItem.classList.add('active');
  }

  // Game UI
  setupGame() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –º–µ–Ω—é
  }

  showGame() {
    this.elements.gameScreen.style.display = 'flex';
    this.elements.flagsScreen.style.display = 'none';
    this.elements.loadingScreen.style.display = 'none';

    // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
    this.cleanupLearningMode();

    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–¥–µ—á–∫–∏ –µ—Å–ª–∏ –Ω–µ —Ä–µ–∂–∏–º –≤—ã–∂–∏–≤–∞–Ω–∏—è
    if (this.currentMode !== 'survival') {
      this.hideLivesIndicator();
    }
  }

  showFlagsGame() {
    this.elements.flagsScreen.style.display = 'flex';
    this.elements.gameScreen.style.display = 'none';
    this.elements.loadingScreen.style.display = 'none';

    // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
    this.cleanupLearningMode();

    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–¥–µ—á–∫–∏ –≤ —Ä–µ–∂–∏–º–µ —Ñ–ª–∞–≥–æ–≤
    this.hideLivesIndicator();
  }

  showLoading() {
    this.elements.gameScreen.style.display = 'none';
    this.elements.loadingScreen.style.display = 'flex';

    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–¥–µ—á–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    this.hideLivesIndicator();
  }

  showReadyScreen() {
    this.elements.gameScreen.style.display = 'flex';
    this.elements.flagsScreen.style.display = 'none';
    this.elements.loadingScreen.style.display = 'none';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É
    this.elements.question.style.display = 'none';
    this.elements.flag.style.display = 'none';

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    let rulesText = '';
    if (this.currentMode === 'time') {
      rulesText = `
        <div class="game-rules">
          <h3>‚è∞ –†–µ–∂–∏–º "–ù–∞ –≤—Ä–µ–º—è"</h3>
          <p>‚Ä¢ –£–≥–∞–¥–∞–π—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Ñ–ª–∞–≥–æ–≤ –∑–∞ 30 —Å–µ–∫—É–Ω–¥</p>
          <p>‚Ä¢ –ó–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç–Ω–∏–º–∞–µ—Ç—Å—è 2 —Å–µ–∫—É–Ω–¥—ã</p>
        </div>
      `;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    this.elements.options.innerHTML = `
        <div class="start-container">
          ${rulesText}
          <button class="start-btn" onclick="document.dispatchEvent(new CustomEvent('beginGame'))">
            üöÄ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
          </button>
        </div>
      `;
  }

  updateScore(score) {
    if (!this.gameLogic) return;

    const stats = score || this.gameLogic.getGameStats();
    let scoreText = '';

    if (this.currentMode === 'time') {
      // –î–ª—è —Ä–µ–∂–∏–º–∞ –Ω–∞ –≤—Ä–µ–º—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è
      const timeLeft = stats.timeLeft || 0;
      scoreText = `${stats.score.correct}/${timeLeft}—Å`;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–µ–∫—Å—Ç (–∏–∑–±–µ–≥–∞–µ–º –º–∏–≥–∞–Ω–∏—è)
      if (this.elements.score.textContent !== scoreText) {
        this.elements.score.textContent = scoreText;
      }
    } else {
      if (this.currentMode === 'survival') {
        // –î–ª—è —Ä–µ–∂–∏–º–∞ –≤—ã–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –∂–∏–∑–Ω–∏
        const lives = stats.lives || 3;
        scoreText = `${stats.score.correct} | ‚ù§Ô∏è ${lives}`;
      } else if (this.currentMode === 'flags') {
        // –î–ª—è —Ä–µ–∂–∏–º–∞ 4 —Ñ–ª–∞–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ/–≤—Å–µ–≥–æ
        const total =
          this.gameLogic && this.gameLogic.countriesAPI
            ? this.gameLogic.countriesAPI.getCountries().length
            : 0;
        scoreText = `${stats.score.correct}/${total}`;
      } else if (this.currentMode === 'region') {
        // –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ/–≤—Å–µ–≥–æ –≤ —Ä–µ–≥–∏–æ–Ω–µ
        if (stats.selectedRegion && stats.totalCountries) {
          scoreText = `${stats.score.correct}/${stats.totalCountries}`;
        } else {
          scoreText = `${stats.score.correct}/0`;
        }
      } else {
        // –î–ª—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ/–≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω
        const totalCountries =
          this.gameLogic && this.gameLogic.countriesAPI
            ? this.gameLogic.countriesAPI.getCountries().length
            : 0;
        scoreText = `${stats.score.correct}/${totalCountries}`;
      }

      this.elements.score.textContent = scoreText;
    }
  }

  // –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ (–±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏)
  updateTimeOnly(timeLeft, correctAnswers) {
    if (this.currentMode !== 'time') return;

    const scoreText = `${correctAnswers}/${timeLeft}—Å`;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–µ–∫—Å—Ç
    if (this.elements.score.textContent !== scoreText) {
      this.elements.score.textContent = scoreText;
    }
  }

  displayQuestion(question, options) {
    // Check if question exists
    if (!question || !question.flag_url) {
      console.error('Invalid question data:', question);
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–∫–∞–∑–∞ –æ—Ç–≤–µ—Ç–∞
    this.isAnswerShown = false;

    // Set flag image with fallback handling
    this.elements.flag.alt = `–§–ª–∞–≥ ${question.name}`;
    this.elements.flag.style.display = 'block';

    // Try to load the flag with multiple fallback strategies
    this.loadFlagWithFallback(question);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ä–¥–µ—á–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤—ã–∂–∏–≤–∞–Ω–∏—è
    if (this.currentMode === 'survival') {
      this.showLivesIndicator();
    }

    // Clear and create options
    this.elements.options.innerHTML = '';

    options.forEach((option, index) => {
      const button = document.createElement('button');
      button.className = 'option-btn';
      button.textContent = option.name;
      button.dataset.country = option.name;

      button.addEventListener('click', () => {
        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        if (this.isAnswerShown) {
          this.dispatchEvent('nextQuestion');
          return;
        }

        // Only allow answering if game is in Question state
        if (this.gameLogic && this.gameLogic.getState().currentState === 'Question') {
          this.dispatchEvent('answerQuestion', option);
        }
      });

      this.elements.options.appendChild(button);
    });
  }

  showResult(result) {
    const { isCorrect, correctAnswer, selectedAnswer } = result;
    this.isAnswerShown = true;

    if (this.currentMode === 'flags') {
      // –î–ª—è —Ä–µ–∂–∏–º–∞ —Ñ–ª–∞–≥–æ–≤ - –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏
      this.highlightFlags(result);
    } else {
      // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ - –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
      this.highlightAnswerButtons(result);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–¥–µ—á–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤—ã–∂–∏–≤–∞–Ω–∏—è
    if (this.currentMode === 'survival') {
      this.showLivesIndicator();
    }
  }

  showGameFinished(stats) {
    const { score, percentage, totalCountries } = stats;

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    this.showResultsModal(stats);
  }

  showResultsModal(stats) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.className = 'results-modal';
    modal.innerHTML = `
      <div class="modal-overlay">
        <div class="modal-content">
          <div class="modal-header">
            <h2>üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h2>
            <button class="modal-close">√ó</button>
          </div>
          <div class="modal-body">
            ${this.getResultsContent(stats)}
          </div>
           <div class="modal-footer">
             <button class="share-btn">
               üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
             </button>
             <button class="play-again-btn">
               üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
             </button>
           </div>
        </div>
      </div>
    `;

    document.body.appendChild(modal);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const shareBtn = modal.querySelector('.share-btn');
    const playAgainBtn = modal.querySelector('.play-again-btn');
    const closeBtn = modal.querySelector('.modal-close');

    shareBtn.addEventListener('click', () => {
      const shareText = this.getShareText(stats);
      // –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
      navigator.clipboard
        .writeText(shareText)
        .then(() => {
          this.showCustomNotification('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        })
        .catch(() => {
          // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
          const textArea = document.createElement('textarea');
          textArea.value = shareText;
          document.body.appendChild(textArea);
          textArea.select();
          document.execCommand('copy');
          document.body.removeChild(textArea);
          this.showCustomNotification('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        });
    });

    playAgainBtn.addEventListener('click', () => {
      document.dispatchEvent(new CustomEvent('resetAllGames'));
      modal.remove();
    });

    closeBtn.addEventListener('click', () => {
      modal.remove();
    });
  }

  getResultsContent(stats) {
    const { score, percentage, totalCountries, selectedRegion, timeLeft, lives } = stats;

    if (this.currentMode === 'time') {
      return `
        <div class="results-stats">
          <div class="stat-item">
            <span class="stat-label">‚è∞ –í—Ä–µ–º—è:</span>
            <span class="stat-value">30 —Å–µ–∫—É–Ω–¥</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</span>
            <span class="stat-value">${score.correct}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</span>
            <span class="stat-value">${score.incorrect}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">üìä –¢–æ—á–Ω–æ—Å—Ç—å:</span>
            <span class="stat-value">${percentage}%</span>
          </div>
        </div>
      `;
    } else if (this.currentMode === 'survival') {
      return `
        <div class="results-stats">
          <div class="stat-item">
            <span class="stat-label">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</span>
            <span class="stat-value">${score.correct}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</span>
            <span class="stat-value">${score.incorrect}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">üìä –¢–æ—á–Ω–æ—Å—Ç—å:</span>
            <span class="stat-value">${percentage}%</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">üíÄ –ü—Ä–∏—á–∏–Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</span>
            <span class="stat-value">–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∂–∏–∑–Ω–∏</span>
          </div>
        </div>
      `;
    } else if (this.currentMode === 'region') {
      return `
        <div class="results-stats">
          <div class="stat-item">
            <span class="stat-label">üåç –†–µ–≥–∏–æ–Ω:</span>
            <span class="stat-value">${selectedRegion}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</span>
            <span class="stat-value">${score.correct}/${totalCountries}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</span>
            <span class="stat-value">${score.incorrect}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">üìä –¢–æ—á–Ω–æ—Å—Ç—å:</span>
            <span class="stat-value">${percentage}%</span>
          </div>
        </div>
      `;
    } else if (this.currentMode === 'flags') {
      return `
        <div class="results-stats">
          <div class="stat-item">
            <span class="stat-label">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</span>
            <span class="stat-value">${score.correct}/${totalCountries}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</span>
            <span class="stat-value">${score.incorrect}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">üìä –¢–æ—á–Ω–æ—Å—Ç—å:</span>
            <span class="stat-value">${percentage}%</span>
          </div>
        </div>
      `;
    } else {
      // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º
      return `
        <div class="results-stats">
          <div class="stat-item">
            <span class="stat-label">‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</span>
            <span class="stat-value">${score.correct}/${totalCountries}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</span>
            <span class="stat-value">${score.incorrect}</span>
          </div>
          <div class="stat-item">
            <span class="stat-label">üìä –¢–æ—á–Ω–æ—Å—Ç—å:</span>
            <span class="stat-value">${percentage}%</span>
          </div>
        </div>
      `;
    }
  }

  getShareText(stats) {
    const { score, percentage, selectedRegion } = stats;
    const siteUrl = 'https://chatup.su/';

    if (this.currentMode === 'time') {
      return `üéØ –†–µ–∂–∏–º "–ù–∞ –≤—Ä–µ–º—è": ${score.correct} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∑–∞ 30 —Å–µ–∫—É–Ω–¥! –¢–æ—á–Ω–æ—Å—Ç—å: ${percentage}%\n\n–ò–≥—Ä–∞–π –≤ "–§–ª–∞–≥–∏ —Å—Ç—Ä–∞–Ω": ${siteUrl}`;
    } else if (this.currentMode === 'survival') {
      return `‚ù§Ô∏è –†–µ–∂–∏–º "–ù–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ": ${score.correct} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤! –¢–æ—á–Ω–æ—Å—Ç—å: ${percentage}%\n\n–ò–≥—Ä–∞–π –≤ "–§–ª–∞–≥–∏ —Å—Ç—Ä–∞–Ω": ${siteUrl}`;
    } else if (this.currentMode === 'region') {
      return `üåç –†–µ–∂–∏–º "–†–µ–≥–∏–æ–Ω—ã" (${selectedRegion}): ${score.correct} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤! –¢–æ—á–Ω–æ—Å—Ç—å: ${percentage}%\n\n–ò–≥—Ä–∞–π –≤ "–§–ª–∞–≥–∏ —Å—Ç—Ä–∞–Ω": ${siteUrl}`;
    } else if (this.currentMode === 'flags') {
      return `üè≥Ô∏è –†–µ–∂–∏–º "4 –§–ª–∞–≥–∞": ${score.correct} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤! –¢–æ—á–Ω–æ—Å—Ç—å: ${percentage}%\n\n–ò–≥—Ä–∞–π –≤ "–§–ª–∞–≥–∏ —Å—Ç—Ä–∞–Ω": ${siteUrl}`;
    } else {
      return `üìö –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: ${score.correct} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤! –¢–æ—á–Ω–æ—Å—Ç—å: ${percentage}%\n\n–ò–≥—Ä–∞–π –≤ "–§–ª–∞–≥–∏ —Å—Ç—Ä–∞–Ω": ${siteUrl}`;
    }
  }

  showGameResults(stats) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="modal-header">
          <h2>üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h2>
          <button class="modal-close">&times;</button>
        </div>
        <div class="modal-body">
          <div class="score-display">
            <div class="score-item">
              <span class="score-label">–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</span>
              <span class="score-value">${stats.score.correct}</span>
            </div>
            <div class="score-item">
              <span class="score-label">–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</span>
              <span class="score-value">${stats.score.incorrect}</span>
            </div>
            <div class="score-item">
              <span class="score-label">–¢–æ—á–Ω–æ—Å—Ç—å:</span>
              <span class="score-value">${stats.percentage}%</span>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button class="share-btn">üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º</button>
          <button class="play-again-btn">üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        </div>
      </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
    document.body.appendChild(modal);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const shareBtn = modal.querySelector('.share-btn');
    const playAgainBtn = modal.querySelector('.play-again-btn');
    const closeBtn = modal.querySelector('.modal-close');

    shareBtn.addEventListener('click', () => {
      const shareText = this.getShareText(stats);
      // –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
      navigator.clipboard
        .writeText(shareText)
        .then(() => {
          this.showCustomNotification('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        })
        .catch(() => {
          // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
          const textArea = document.createElement('textarea');
          textArea.value = shareText;
          document.body.appendChild(textArea);
          textArea.select();
          document.execCommand('copy');
          document.body.removeChild(textArea);
          this.showCustomNotification('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        });
    });

    playAgainBtn.addEventListener('click', () => {
      document.dispatchEvent(new CustomEvent('resetAllGames'));
      modal.remove();
    });

    closeBtn.addEventListener('click', () => {
      modal.remove();
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.remove();
      }
    });
  }

  showCustomNotification(message) {
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = 'custom-notification';
    notification.innerHTML = `
      <div class="notification-content">
        <span class="notification-icon">‚úÖ</span>
        <span class="notification-text">${message}</span>
      </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(135deg, #4CAF50, #45a049);
      color: white;
      padding: 15px 20px;
      border-radius: 10px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
      z-index: 10000;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      font-size: 14px;
      font-weight: 500;
      transform: translateX(100%);
      transition: transform 0.3s ease;
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM
    document.body.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      notification.style.transform = 'translateX(0)';
    }, 10);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      notification.style.transform = 'translateX(100%)';
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }

  // Event system
  dispatchEvent(eventName, data = null) {
    const event = new CustomEvent(eventName, { detail: data });
    document.dispatchEvent(event);
  }

  // Utility methods
  addClass(element, className) {
    if (element) element.classList.add(className);
  }

  removeClass(element, className) {
    if (element) element.classList.remove(className);
  }

  toggleClass(element, className) {
    if (element) element.classList.toggle(className);
  }

  setText(element, text) {
    if (element) element.textContent = text;
  }

  setHTML(element, html) {
    if (element) element.innerHTML = html;
  }

  // Flag loading with fallback strategies
  loadFlagWithFallback(question) {
    const flagElement = this.elements.flag;
    let attempts = 0;
    const maxAttempts = 3;

    const tryLoadFlag = () => {
      attempts++;

      if (attempts === 1) {
        // First attempt: original URL
        flagElement.src = question.flag_url;
      } else if (attempts === 2) {
        // Second attempt: try SVG version if available
        flagElement.src = question.flag_svg || question.flag_url;
      } else if (attempts === 3) {
        // Third attempt: show placeholder with country name
        this.showFlagPlaceholder(question.name);
        return;
      }

      flagElement.onerror = () => {
        console.warn(`Failed to load flag for ${question.name} (attempt ${attempts})`);
        if (attempts < maxAttempts) {
          setTimeout(tryLoadFlag, 100); // Small delay before retry
        } else {
          this.showFlagPlaceholder(question.name);
        }
      };
    };

    tryLoadFlag();
  }

  showFlagPlaceholder(countryName) {
    const flagElement = this.elements.flag;
    flagElement.style.display = 'flex';
    flagElement.style.alignItems = 'center';
    flagElement.style.justifyContent = 'center';
    flagElement.style.backgroundColor = '#f0f0f0';
    flagElement.style.border = '2px dashed #ccc';
    flagElement.style.color = '#666';
    flagElement.style.fontSize = '18px';
    flagElement.style.fontWeight = 'bold';
    flagElement.style.textAlign = 'center';
    flagElement.style.padding = '20px';
    flagElement.innerHTML = `–§–ª–∞–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω<br><small>${countryName}</small>`;
  }

  showLivesIndicator() {
    const stats = this.gameLogic.getGameStats();
    const lives = stats.lives || 3;
    const maxLives = stats.maxLives || 3;

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∂–∏–∑–Ω–µ–π
    let livesHTML = '';
    for (let i = 0; i < maxLives; i++) {
      if (i < lives) {
        livesHTML += '<span class="life-heart">‚ù§Ô∏è</span>';
      } else {
        livesHTML += '<span class="life-heart lost">‚ù§Ô∏è</span>';
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∂–∏–∑–Ω–µ–π –Ω–∞–¥ —Ñ–ª–∞–≥–æ–º
    const livesContainer = document.createElement('div');
    livesContainer.className = 'lives-indicator';
    livesContainer.innerHTML = livesHTML;

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    const oldIndicator = document.querySelector('.lives-indicator');
    if (oldIndicator) {
      oldIndicator.remove();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ñ–ª–∞–≥–∞, –Ω–æ –ü–ï–†–ï–î —Ñ–ª–∞–≥–æ–º
    const flagContainer = this.elements.flag.parentNode;
    flagContainer.insertBefore(livesContainer, this.elements.flag);
  }

  hideLivesIndicator() {
    // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∂–∏–∑–Ω–µ–π –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const oldIndicator = document.querySelector('.lives-indicator');
    if (oldIndicator) {
      oldIndicator.remove();
    }
  }

  showRegionSelection() {
    this.elements.gameScreen.style.display = 'flex';
    this.elements.flagsScreen.style.display = 'none';
    this.elements.loadingScreen.style.display = 'none';

    // –û—á–∏—â–∞–µ–º —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
    this.cleanupLearningMode();

    // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ –≤–æ–ø—Ä–æ—Å
    this.elements.question.style.display = 'none';
    this.elements.flag.style.display = 'none';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    this.updateScore();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞
    this.elements.options.innerHTML = `
       <div class="region-selection">
         <h3>üåç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω</h3>
         <div class="region-buttons">
           <button class="region-btn" data-region="–ï–≤—Ä–æ–ø–∞">üá™üá∫ –ï–≤—Ä–æ–ø–∞</button>
           <button class="region-btn" data-region="–ê–∑–∏—è">üåè –ê–∑–∏—è</button>
           <button class="region-btn" data-region="–ê—Ñ—Ä–∏–∫–∞">üåç –ê—Ñ—Ä–∏–∫–∞</button>
           <button class="region-btn" data-region="–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞">üá∫üá∏ –°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞</button>
           <button class="region-btn" data-region="–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞">üáßüá∑ –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞</button>
           <button class="region-btn" data-region="–û–∫–µ–∞–Ω–∏—è">üåä –û–∫–µ–∞–Ω–∏—è</button>
         </div>
       </div>
     `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤
    this.elements.options.querySelectorAll('.region-btn').forEach((btn) => {
      btn.addEventListener('click', (e) => {
        const region = e.target.dataset.region;
        this.dispatchEvent('selectRegion', region);
      });
    });
  }

  showLearningMode() {
    this.elements.gameScreen.style.display = 'flex';
    this.elements.flagsScreen.style.display = 'none';
    this.elements.loadingScreen.style.display = 'none';

    // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ –≤–æ–ø—Ä–æ—Å
    this.elements.question.style.display = 'none';
    this.elements.flag.style.display = 'none';

    // –°–∫—Ä—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è
    this.elements.score.style.display = 'none';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω –æ–±—É—á–µ–Ω–∏—è
    this.elements.options.innerHTML = `
       <div class="learning-mode">
         <h3>üìñ –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è</h3>
         <p>–ò–∑—É—á–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω—ã –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞ –∏ –æ—á–∫–æ–≤</p>
         <button class="start-btn" id="start-learning">üöÄ –ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ</button>
       </div>
     `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
    const startBtn = document.getElementById('start-learning');
    if (startBtn) {
      startBtn.addEventListener('click', () => {
        this.dispatchEvent('beginGame');
      });
    }
  }

  showLearningQuestion(country) {
    if (
      !country ||
      !this.elements.options ||
      !this.elements.question ||
      !this.elements.flag ||
      !this.elements.gameScreen
    ) {
      console.error('Country is null or required elements missing');
      return;
    }

    // –°–∫—Ä—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è
    this.elements.score.style.display = 'none';

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å learning-mode –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
    this.elements.gameScreen.classList.add('learning-mode');
    this.elements.gameScreen.style.display = 'flex';
    this.elements.flagsScreen.style.display = 'none';
    this.elements.loadingScreen.style.display = 'none';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ —Ñ–ª–∞–≥
    this.elements.question.style.display = 'block';
    this.elements.flag.style.display = 'block';
    this.elements.question.textContent = country.name;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–ª–∞–≥
    this.loadFlagWithFallback(country);

    // –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ
    const additionalInfo = [];
    if (country.capital) additionalInfo.push(`üèõÔ∏è ${country.capital}`);
    if (country.language) additionalInfo.push(`üó£Ô∏è ${country.language}`);
    if (country.population) additionalInfo.push(`üë• ${country.population}`);
    if (country.region) additionalInfo.push(`üåç ${country.region}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ –∏ –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∞"
    this.elements.options.innerHTML = `
       <div class="learning-info">
         <div class="country-info">
           ${additionalInfo.map((info) => `<div class="info-item">${info}</div>`).join('')}
         </div>
         <button class="next-btn" id="next-country">‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∞</button>
       </div>
     `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∞"
    const nextBtn = document.getElementById('next-country');
    if (nextBtn) {
      nextBtn.addEventListener('click', () => {
        this.dispatchEvent('nextQuestion');
      });
    }
  }

  cleanupLearningMode() {
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
    const learningInfo = document.querySelector('.learning-info');
    if (learningInfo) learningInfo.remove();

    const nextBtn = document.getElementById('next-country');
    if (nextBtn) nextBtn.remove();

    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    if (this.elements.question) {
      this.elements.question.textContent = '';
      this.elements.question.style.display = 'block';
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
    if (this.elements.gameScreen) this.elements.gameScreen.classList.remove('learning-mode');
    if (this.elements.flag) this.elements.flag.style.display = 'block';
    if (this.elements.score) this.elements.score.style.display = 'block';
  }

  // Flags game methods
  displayFlagsQuestion(question, options) {
    if (!question || !options || options.length !== 4) {
      console.error('Invalid flags question data:', question, options);
      return;
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    this.isAnswered = false;

    // Set question text - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
    this.elements.flagsQuestion.textContent = question.name;

    // Clear and create flags
    this.elements.flagsContainer.innerHTML = '';

    options.forEach((option, index) => {
      const flagDiv = document.createElement('div');
      flagDiv.className = 'flag-item';
      flagDiv.dataset.country = option.name;

      const flagImg = document.createElement('img');
      flagImg.className = 'flag-img';
      flagImg.src = option.flag_url;
      flagImg.alt = `–§–ª–∞–≥ ${option.name}`;

      // Add error handling for flag loading
      flagImg.onerror = () => {
        console.warn(`Failed to load flag for ${option.name}`);
        flagImg.style.display = 'none';
      };

      flagImg.onload = () => {
        flagImg.style.display = 'block';
      };

      flagDiv.appendChild(flagImg);

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ —Ñ–ª–∞–≥
      flagDiv.addEventListener('click', () => {
        if (!this.isAnswered) {
          this.isAnswered = true;
          this.dispatchEvent('answerQuestion', option);
        } else {
          // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
          this.dispatchEvent('nextQuestion');
        }
      });

      this.elements.flagsContainer.appendChild(flagDiv);
    });

    // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ñ–ª–∞–≥–∏ –Ω–∞–ø—Ä—è–º—É—é
    this.elements.flagsOptions.innerHTML = '';
  }

  updateFlagsScore(score) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–∑–µ–ª–µ–Ω—ã–º) / –≤—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫
    this.elements.flagsScore.innerHTML = `<span style="color: #4CAF50;">${score.correct}</span>/<span>${score.total}</span>`;
  }

  highlightFlags(result) {
    const { isCorrect, correctAnswer, selectedAnswer } = result;
    const flagItems = this.elements.flagsContainer.querySelectorAll('.flag-item');

    flagItems.forEach((flagItem) => {
      const countryName = flagItem.dataset.country;

      if (countryName === correctAnswer.name) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –∑–µ–ª–µ–Ω—ã–π
        flagItem.style.border = '4px solid #4CAF50';
        flagItem.style.boxShadow = '0 0 20px rgba(76, 175, 80, 0.5)';
      } else if (countryName === selectedAnswer.name && !isCorrect) {
        // –í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –∫—Ä–∞—Å–Ω—ã–π
        flagItem.style.border = '4px solid #f44336';
        flagItem.style.boxShadow = '0 0 20px rgba(244, 67, 54, 0.5)';
      } else {
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ - —Å–µ—Ä—ã–π
        flagItem.style.border = '4px solid #9e9e9e';
        flagItem.style.boxShadow = '0 0 10px rgba(158, 158, 158, 0.3)';
        flagItem.style.opacity = '0.6';
      }
    });
  }

  highlightAnswerButtons(result) {
    const { isCorrect, correctAnswer, selectedAnswer } = result;
    const buttons = document.querySelectorAll('.option-btn');

    buttons.forEach((button) => {
      const countryName = button.dataset.country;

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
      button.classList.remove('correct-answer', 'incorrect-answer', 'other-answer');

      if (countryName === correctAnswer.name) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –∑–µ–ª–µ–Ω—ã–π
        button.classList.add('correct-answer');
      } else if (countryName === selectedAnswer.name) {
        // –í—ã–±—Ä–∞–Ω–Ω—ã–π –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –∫—Ä–∞—Å–Ω—ã–π
        button.classList.add('incorrect-answer');
      } else {
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ - —Å–µ—Ä—ã–π
        button.classList.add('other-answer');
      }

      // –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
      button.style.cursor = 'pointer';
    });
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
window.shareResults = function (text) {
  if (navigator.share) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Web Share API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    navigator
      .share({
        title: '–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã "–§–ª–∞–≥–∏ —Å—Ç—Ä–∞–Ω"',
        text: text,
        url: window.location.href,
      })
      .catch((err) => {
        console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', err);
        fallbackShare(text);
      });
  } else {
    // Fallback –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–æ–≤ –±–µ–∑ Web Share API
    fallbackShare(text);
  }
};

function fallbackShare(text) {
  // –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  navigator.clipboard
    .writeText(text)
    .then(() => {
      alert('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    })
    .catch(() => {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
      const textArea = document.createElement('textarea');
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      alert('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
    });
}
